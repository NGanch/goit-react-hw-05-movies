{"version":3,"file":"static/js/751.05ea6182.chunk.js","mappings":"4TAGMA,EAAWC,IAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAMP,SAAeC,IAAtB,+B,aAAO,O,oBAAA,wGACkBN,EAASO,IAAI,sBAD/B,uBACIC,EADJ,EACIA,KACDC,EAAUD,EAAKE,QAFlB,kBAGID,GAHJ,kEAQA,IAAME,EAAe,mCAAG,WAAMC,GAAN,iFACZ,mCADY,SAEPX,IAAAA,IAAU,4CAA4C,CACnEE,OAAQ,CACPC,QAHO,mCAIPS,cAAe,QACfR,SAAU,QACVS,KAAM,IACNF,MAAOA,KARY,uBAErBJ,EAFqB,EAErBA,KAUFO,EAAQP,EAAKE,QAZU,kBAatBK,GAbsB,2CAAH,sDAiBrB,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAAsCC,GAAtC,yFACgBjB,EAASO,IAAT,iBAAuBU,IADvC,uBACET,EADF,EACEA,KADF,kBAEEA,GAFF,kEAMA,SAAeU,EAAtB,kC,aAAO,O,oBAAA,WAA6BD,GAA7B,yFACkBjB,EAASO,IAAT,iBAAuBU,EAAvB,aADlB,uBACIT,EADJ,EACIA,KADJ,kBAEIA,GAFJ,kEAKC,SAAeW,EAAtB,kC,aAAO,O,oBAAA,WAAgCF,GAAhC,yFACiBjB,EAASO,IAAT,iBAAuBU,EAAvB,aADjB,uBACGT,EADH,EACGA,KADH,kBAEGA,GAFH,kE,qGC/CKY,EAAWC,EAAAA,EAAAA,GAAH,oGAORC,EAAMD,EAAAA,EAAAA,IAAH,sOAQHE,EAAWF,EAAAA,EAAAA,GAAH,2SAWRG,EAAYH,EAAAA,EAAAA,GAAH,mFAKTI,EAAQJ,EAAAA,EAAAA,EAAH,mF,4GCGlB,EA/Ba,WACX,MCF0B,WAC1B,OAAwBK,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQf,GAAYgB,EAAAA,EAAAA,MAAZhB,QAiBR,OAhBAiB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,oGAEfL,GAAa,GAFE,UAIQZ,EAAAA,EAAAA,IAAcD,GAJtB,OAITmB,EAJS,OAKfR,GAAQ,OAAIQ,EAAST,OALN,gDAOfK,EAAS,KAAMK,SAPA,yBASfP,GAAa,GATE,4EAAH,qDAYhBK,GACD,GAAE,CAAClB,IAEG,CAAEU,KAAAA,EAAME,UAAAA,EAAWE,MAAAA,EAC3B,CDrBoCO,GAA3BX,EAAR,EAAQA,KAAME,EAAd,EAAcA,UAAWE,EAAzB,EAAyBA,MACzB,OACE,UAACX,EAAD,WACGS,IAAa,SAACU,EAAA,EAAD,IACbR,IAAS,uBAAG,gDACZA,GACCS,EAAAA,GAAAA,MAAY,8CAAqC,CAC/CC,SAAU,aACVC,MAAO,UAEVf,EAAKgB,KAAI,YAAqD,IAAlDC,EAAiD,EAAjDA,GAAIC,EAA6C,EAA7CA,cAAeC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAC5C,OACE,UAACxB,EAAD,WACGuB,GACC,SAACxB,EAAD,CACE0B,IAAG,yCAAoCF,GACvCG,IAAKJ,KAGP,SAACvB,EAAD,CAAK0B,IAAI,6EAGX,SAACxB,EAAD,UAAYqB,KACZ,UAACpB,EAAD,WAAO,cAAYsB,OAXNH,EAclB,MAGN,C","sources":["Service/API.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","hooks/useFetchCast.jsx"],"sourcesContent":["import axios from 'axios';\n\n//=======================\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'c50f16584540f084a15313cb9781232d',\n    language: 'en-US',\n  }\n});\n\n //=========================Запит списку фільмів HOME=========================\n\nexport async function fetchPopularMovies(){\n    const {data} = await instance.get('/trending/all/week');\n    const popular = data.results;\n    return popular;\n}\n\n //=========================Запит списку фільмів MOVIE=========================\n\nexport const fetchMoviesName = async(query) => {\n   const API_KEY = 'c50f16584540f084a15313cb9781232d';\n   const {data} = await axios.get('https://api.themoviedb.org/3/search/movie',{\n           params: {\n            api_key: API_KEY,\n            include_adult: 'false',\n            language: 'en-US', \n            page: '1', \n            query: query,\n           },\n         });\n\n  const movie = data.results;\n  return movie;\n}\n\n //=========================Запит повної інфо фільма =========================\nexport async function fetchTrendingInfoMovie(movieId){\n  const {data} = await instance.get(`/movie/${movieId}`);\n  return data;\n}\n //=========================Запит акторського складу =========================\n \nexport async function fetchInfoCast(movieId){\n    const {data} = await instance.get(`/movie/${movieId}/credits`);\n    return data;\n}\n //=========================запит оглядів для сторінки кінофільму =========================\n export async function fetchInfoReviews(movieId){\n    const {data} = await instance.get(`/movie/${movieId}/reviews`);\n    return data;\n}\n //=========================запит оглядів для сторінки кінофільму =========================\n","import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  display: flex;\n  gap: 30px;\n  flex-direction: row;\n  flex-wrap: wrap;\n`;\n\nexport const IMG = styled.img`\n  height: 200px;\n  width: 180px;\n  box-shadow: 0px 5px 4px rgba(46, 47, 66, 0.08),\n    0px 4px 4px rgba(46, 47, 66, 0.16), 0px 4px 10px rgba(46, 47, 66, 0.08),\n    0px 4px 10px rgba(46, 47, 66, 0.08);\n`;\n\nexport const CastItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 270px;\n  width: 180px;\n  box-shadow: 0px 5px 4px rgba(46, 47, 66, 0.08),\n    0px 4px 4px rgba(46, 47, 66, 0.16), 0px 4px 10px rgba(46, 47, 66, 0.08),\n    0px 4px 10px rgba(46, 47, 66, 0.08);\n`;\n\nexport const CastTitle = styled.h4`\n  padding-top: 15px;\n  font-size: 15px;\n  color: white;\n`;\nexport const CastP = styled.p`\n  padding-top: 15px;\n  font-size: 10px;\n  color: white;\n`;\n","import { CastList, CastItem, IMG, CastTitle, CastP } from '../Cast/Cast.styled';\nimport { useFetchCast } from 'hooks/useFetchCast';\nimport { Loader } from '../Loader/Loader';\nimport { toast } from 'react-toastify';\n//=============================================\nconst Cast = () =>{\n  const { cast, isLoading, error } = useFetchCast();\n  return (\n    <CastList>\n      {isLoading && <Loader />}\n      {error && <p>Sorry. There are no images ... 😭</p>}\n      {error &&\n        toast.error('Sorry. There are no muvies ... 😭', {\n          position: 'top-center',\n          theme: 'light',\n        })}\n      {cast.map(({ id, original_name, profile_path, character }) => {\n        return (\n          <CastItem key={id}>\n            {profile_path ? (\n              <IMG\n                src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                alt={original_name}\n              />\n            ) : (\n              <IMG src=\"https://i.pinimg.com/236x/be/0b/c9/be0bc94db984f5329afef2e0dacb8d55.jpg\" />\n            )}\n\n            <CastTitle>{original_name}</CastTitle>\n            <CastP>Character: {character}</CastP>\n          </CastItem>\n        );\n      })}\n    </CastList>\n  );\n}\nexport default Cast;\n//=============================================\n\n\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { fetchInfoCast } from '../Service/API';\n\nexport const useFetchCast = () => {\n  const [cast, setCast] = useState([]);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n  useEffect(() => {\n    const getDetails = async () => {\n      try {\n        setIsLoading(true);\n\n        const response = await fetchInfoCast(movieId);\n        setCast([...response.cast]);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getDetails();\n  }, [movieId]);\n\n  return { cast, isLoading, error };\n};\n"],"names":["instance","axios","baseURL","params","api_key","language","fetchPopularMovies","get","data","popular","results","fetchMoviesName","query","include_adult","page","movie","fetchTrendingInfoMovie","movieId","fetchInfoCast","fetchInfoReviews","CastList","styled","IMG","CastItem","CastTitle","CastP","useState","cast","setCast","isLoading","setIsLoading","error","setError","useParams","useEffect","getDetails","response","message","useFetchCast","Loader","toast","position","theme","map","id","original_name","profile_path","character","src","alt"],"sourceRoot":""}